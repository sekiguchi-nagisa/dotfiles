source repl inlined

let _ls_opt : [String]
case $OSTYPE {
    'Linux' => { $_ls_opt.add('--color=auto'); }
    'Darwin' => { $_ls_opt.add('-G'); }
    else => {}
}

ls() {
    command ls $_ls_opt $@
}

grep() {
    command grep --color=auto $@
}

la() {
    ls -la $@
}

ll() {
    ls -ll $@
}

if (command -v cnf &>> /dev/null) {
    $CNF_HOOK = function($s : String, $a : [String]) => cnf $s
}

if (command -v powerline-go &>>  /dev/null) {
    hash powerline-go
    $PROMPT_HOOK = function($s : String) => {
        var ret = "$(powerline-go -error $? -shell bash -condensed -colorize-hostname -max-width 50)"
        $ret :- $PS1
    }
}

source path

function _ff($path : String) : String {
    command -v fzf &>> /dev/null || return "";
    command -v find &>> /dev/null || return "";
    var p = $path :- "."

    var dir = "$(find $p -path '*/\.*' -prune \
                  -o  -print 2>> /dev/null | fzf +m -1)"
    return $dir
}


fd() {
    var dir = $_ff($1)
    if !(test -d "$dir") {
        $dir = $dirname($dir)
    }
    $dir.empty() || cd $dir && ls
}

function _open($c : String) {
    case $OSTYPE {
    'Linux' => (uname -r | grep '[Mm]icrosoft' &>> /dev/null) ? (explorer.exe "$(wslpath -aw $c)") : xdg-open $c
    'Darwin' => command open $c
    else => echo 1>&2 unsupported os: $OSTYPE
    }
}

open() {
    for $e in $@ {
        $_open($e)
    }
}

fo() {
    var path = $_ff($1)
    var dir = $path
    if !(test -d "$dir") {
        $dir = $dirname($dir)
    }
    $path.empty() || open $path
    $dir.empty() || cd $dir && ls
}

# for proxy
source! ~/extra_setting.ds inlined
